python\nfrom telegram import Update\nfrom telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters\nfrom redis_om import get_redis_connection, HashModel, Migrator\nfrom .settings import settings\nfrom .gpt_client import ask_gpt\n\nredis = get_redis_connection(url=settings.redis_url)\n\nclass Dialog(HashModel):\n user_id: int\n messages: list\n class Meta:\n database = redis\nMigrator().run()\n\nasync def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\n await update.message.reply_text(\"Привет! Я GPT‑бот. Напиши вопрос — отвечу 😊\")\n\nasync def chat(update: Update, ctx: ContextTypes.DEFAULT_TYPE):\n uid = update.effective_user.id\n text = update.message.text\n dlg = Dialog.find(Dialog.user_id == uid).first()\n hist = dlg.messages if dlg else []\n answer = await ask_gpt(text, hist)\n new_hist = (hist + [{\"role\":\"user\",\"content\":text},{\"role\":\"assistant\",\"content\":answer}])[-15:]\n (dlg or Dialog(user_id=uid)).update(messages=new_hist)\n await update.message.reply_text(answer)\n\ndef build_app() -> Application:\n app = Application.builder().token(settings.telegram_token).concurrent_updates(True).build()\n app.add_handler(CommandHandler(\"start\", start))\n app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))\n return app\n
